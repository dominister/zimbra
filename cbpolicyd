#!/usr/bin/perl
# Cluebringer policy daemon
# Copyright (C) 2007, Nigel Kukard  <nkukard@lbsd.net>
# Copyright (C) 2008, LinuxRulz
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


use strict;
use warnings;


package cbp;


# Version
my $VERSION = "0.1";


use base qw(Net::Server::PreFork);
use Config::IniFiles;
use Data::Dumper;
use Getopt::Long;

use cbp::logging;

use cbp::dblayer;
use cbp::dbilayer;



# Override configuration
sub configure {
	my $self = shift;
	my $server = $self->{'server'};
	my $cfg;
	my $cmdline;
	my $inifile;


	# Set defaults
	$cfg->{'config_file'} = "/etc/cluebringer.conf";
	$server->{'timeout'} = 120;

	# Parse command line params
	%{$cmdline} = ();
	GetOptions(
			\%{$cmdline},
			"help",
			"config:s",
			"debug",
	);

	# Check for some args
	if ($cmdline->{'help'}) {
		$self->displayHelp();
		exit 0;
	}
	if ($cmdline->{'debug'}) {
		$server->{'log_level'} = 4;
		$cfg->{'debug'} = 1;
	}
	if (defined($cmdline->{'config'}) && $cmdline->{'config'} ne "") {
		$cfg->{'config_file'} = $cmdline->{'config'};
	}

	# Check config file exists
	if (! -f $cfg->{'config_file'}) {
		print(STDERR "ERROR: No configuration file '".$cfg->{'config_file'}."' found!\n");
		exit 1;
	}
	
	# Use config file, ignore case
	tie my %inifile, 'Config::IniFiles', (
			-file => $cfg->{'config_file'},
			-nocase => 1
	) or die "Failed to open config file '".$cfg->{'config_file'}."': $!";
	# Copy config
	my %config = %inifile;
	untie(%inifile);


	# Pull in params for the server
	my @server_params = (
			'log_level','log_file',
			'syslog_logsock', 'syslog_ident', 'syslog_logopt', 'syslog_facility',
			'port', 'host',
			'allow', 'deny', 'cidr_allow', 'cidr_deny',
			'pid_file', 
			'user', 'group',
			'timeout'
	);
	foreach my $param (@server_params) {
		$server->{$param} = $config{'server'}{$param} if (defined($config{'server'}{$param}));
	}
	
	# Small fixup if we going to be running in background
	if ((my $val = $config{'server'}{'background'})) {
		$server->{'setsid'} = 1;
	}

	# Split off modules
	if (!defined($config{'server'}{'modules'})) {
		$self->log(LOG_WARN,"Server configuration error: 'modules' not found");
		exit 1;
	}
	$cfg->{'module_list'} = $config{'server'}{'modules'};
	foreach my $module (@{$cfg->{'modules_list'}}) {
		$module =~ s/\s+//g;
	}

	# Save our config and stuff
	$self->{'config'} = $cfg;
	$self->{'cmdline'} = $cmdline;
	$self->{'inifile'} = \%config;
}



# Run straight after ->run
sub post_configure_hook {
	my $self = shift;


	$self->log(LOG_NOTICE,"Initializing system modules.");
	cbp::config::Init($self);
	# Init caching engine
	#cbp::cache::Init($self);
	$self->log(LOG_NOTICE,"System modules initialized.");


	$self->log(LOG_NOTICE,"Module load started...");
	# Load modules
	foreach my $module (@{$self->{'config'}{'module_list'}}) {
		# Load module
		my $res = eval("
			use cbp::modules::$module;
			plugin_register(\$self,\"$module\",\$cbp::modules::${module}::pluginInfo);
		");
		if ($@ || (defined($res) && $res != 0)) {
			$self->log(LOG_WARN,"WARNING: Error loading plugin $module ($@)");
		}
	}

	$self->log(LOG_NOTICE,"Module load done.");
}


# Register plugin info
sub plugin_register {
	my ($self,$module,$info) = @_;


	# If no info, return
	if (!defined($info)) {
		$self->log(LOG_WARN,"WARNING: Plugin info not found for module => $module");
		return -1;
	}

	# Set real module name & save
	$info->{'Module'} = $module;
	push(@{$self->{'modules'}},$info);

	# If we should, init the module
	if (defined($info->{'init'})) {
			$info->{'init'}($self);
	}

	$self->log(LOG_NOTICE,"  => $module");

	return 0;
}


# Initialize child
sub child_init_hook
{
	my $self = shift;

	
	$self->SUPER::child_init_hook();
	
#	$self->log(4,"Starting up caching engine ($$)");
#	cbp::cache::connect($self);

	# Init system stuff
	$self->{'client'}->{'dbh'} = cbp::dbilayer::Init($self);
	if (!defined($self->{'client'}->{'dbh'})) {
		$self->log(LOG_WARN,"Failed to Initialize: ".cbp::dbilayer::internalErr()." ($$)");
		die;
	}
	if ($self->{'client'}->{'dbh'}->connect()) {
		$self->log(LOG_WARN,"Failed to connect to database: ".$self->{'client'}->{'dbh'}->Error()." ($$)");
		die;
	}

}




# Destroy the child
sub child_finish_hook {
	my $self = shift;
	my $server = $self->{'server'};

	$self->SUPER::child_init_hook();
	
#	$self->log(LOG_DEBUG,"Shutting down caching engine ($$)");
#	cbp::cache::disconnect($self);
}


# Process requests we get
sub process_request {
	my $self = shift;
	my $server = $self->{'server'};


	# Setup database handle
	cbp::dblayer::setHandle($self->{'client'}->{'dbh'});

	my %request;

	# Eval to catch sig ALRM
	eval {
		local $SIG{'ALRM'} = sub { die "Timed Out!\n" };

		# Give connection $timeout time to do something
		my $previous_alarm = alarm($server->{'timeout'});

		# Loop with lines we get
		while (my $line = <STDIN>) {
			# If we don't get a pair, b0rk
			last unless $line =~ s/^([^=]+)=(.*)\n$//;
			$request{$1} = $2;

			# Reset timeout
			alarm($server->{'timeout'});
		}

		alarm($previous_alarm);
	};

	# Check results
	if ($@ =~ /timed out/i) {
		# FIXME: Log message we timed out
		$self->log(LOG_NOTICE,"[CBPOLICYD] Timed out!");
		return;
	} elsif (keys %request < 1) {
		$self->log(LOG_WARN,"[CBPOLICYD] Didn't get any key pairs");
	} else {
		# Sanitize data
		$request{'sender'} = lc($request{'sender'}) if (defined($request{'sender'}));
		$request{'recipient'} = lc($request{'recipient'}) if (defined($request{'recipient'}));
		# Internal data
		$request{'_timestamp'} = time();
		($request{'_domain'} = $request{'recipient'}) =~ s/[^@]+@//;

		$self->log(LOG_DEBUG,"[CBPOLICYD:$$] Request:\n".Dumper(\%request));

		# Check the data we have
		$self->do_work(\%request);

		# Grab result & check, DUNNO if no data
		my $res = "action=DUNNO";
		print("$res\n");
	}

	print("\n");
}


# This is where the actual processing & checking of modules takes place
sub do_work {
	my ($self,$data) = @_;


	# Loop with modules
	foreach my $module (@{$self->{'modules'}}) {
		
		# Run check
		my $res = $module->{'check'}($self,$data);


		# This means we must just carry on
		if (!defined($res)) {
			$self->log(LOG_ERR,"Ok ... we got undef, do nothing");
			next;

		# REJECT
		} elsif ($res =~ /^action=REJECT/i) {
			$self->log(LOG_ERR,"Ok ... we must reject");
		
		# DEFER_IF_PERMIT
		} elsif ($res =~ /^action=DEFER_IF_PERMIT/i) {
			$self->log(LOG_ERR,"Ok ... we must defer if we going to permit");
		
		# OK
		} elsif ($res =~ /^action=OK/i) {
			$self->log(LOG_ERR,"Ok ... total whitelisting");

		}
	}
}


# Initialize child
sub server_exit
{
	my $self = shift;

	
	$self->log(2,"Destroying system modules.");
	# Destroy cache
#	cbp::cache::Destroy($self);
	$self->log(2,"System modules destroyed.");

	$self->SUPER::server_exit();
}



# Slightly better logging
sub log
{
	my ($self,$level,$msg,@args) = @_;
	$self->SUPER::log($level,"[".$self->log_time." - $$] $msg",@args);
}


# Display help
sub displayHelp {
	print(STDERR<<EOF);

Usage: $0 [args]
    --config=<file>        Configuration file
    --debug                Put into debug mode

EOF
}


print(STDERR "ClueBringer v$VERSION - Copyright (c) 2007-2008 LinuxRulz\n");


__PACKAGE__->run;


1;
# vim: ts=4
